load("~/Data/Tarik/working_C1_Tarik.RData")
MZSVZ <- read.csv("~/Data/Da_Mi/MZ vs SVZ gene list 08-11-2017.csv", header = F, stringsAsFactors = F)
MZSVZ[,1] <- toupper(MZSVZ[,1])
MZSVZ[,1] <- unique(sapply(MZSVZ[,1], function(x){paste("\\b", x, "$", sep = "")}))
MZSVZ[,1] <- as.character(sapply(MZSVZ[,1],function(x){grep(x, rownames(df0@data), value = T)}))
MZSVZ <- MZSVZ[MZSVZ[,1] != "character(0)",]
panRGC <- c("\\bNES$","\\bCD133$", "\\bGLI3$","\\bPAX6$","\\bPROM1$", "\\bSOX1$", "\\bSOX9$",
"\\bSOX2$", "\\bVIM$")
aRGC<- c("\\bFGFR3$", "\\bFOXP2$","\\bHES1$", "\\bLRIG1$", "\\bNHLH2$","\\bPALLD$","\\bS100B$",
"\\bTAGLN2$")
bRGC <- c("\\bFABP7$", "\\bFAM107A$","\\bHOPX$","\\bLIFR$","\\bMLC1$","\\bPTPRZ1$", "\\bSLC1A3$","\\bTNC$","\\bUNC5D$")
IPC <- c("\\bEOMES$","\\bNEUROD1$","\\bNEUROD2$","\\bNEUROD4$","\\bNEUROD6$","\\bPENK$","\\bPPP1R17$")
EENR <- c("\\CUX1$","\\bCUX2$","\\bFEZF2$", "\\bSOX4$","\\bSOX11$")
pNeuron <- c("\\bDCX$","\\bDPYSL3$","\\bENO2$","\\bRBFOX3$","\\bSYP$")
EEN <- c("\\bBCL11A$" ,"\\bBCL11B$", "\\bBHLHE22$","\\bCELF4$","\\bDPYSL5","\\bFOXP1$",
"\\bROBO2$","\\bSOX5$","\\bSTMN2$","\\bTBR1$")
LEN <- c("\\bMEF2C$","\\bPOU3F2$","\\bPOU3F3$","\\bRORB$","\\bSATB2$")
IN <- c("\\bDLX1$", "\\bDLX2$", "\\bDLX5$", "\\bDLX6$", "\\bGAD1$", "\\bGAD2$", "\\bISRL2$",
"\\bNPY$", "\\bPOU3F1", "\\bPVALB$", "\\bCCK$", "\\bVIP$", "\\bSST$", "\\bMAF$", "\\bMAFB$")
Astro <- c("\\bATP13A4$", "\\bALDH1L1$","\\bAQP4$", "\\bBMPR1B$", "\\bEDNRB$", "\\bEGFR$","\\bDIO2$","\\bFGFR3$",
"\\bGFAP$","\\bGJA1$", "\\bGRM3$", "\\bLRIG1$",
"\\bMLC1$","\\bSLC4A4$", "\\bSOX9$")
Olig <- c("\\bNKX2-2$", "\\bOLIG1$","\\bOLIG2$", "\\bSDC3$", "\\bPID1$")
micro <- c("\\bCCL2$","\\bCCL3$","\\bCD83$","\\bCX3CR1$","\\bIL1A$","\\bRUNX1$",
"\\bTMEM119$", "\\bSALL1$")
genes <- unique(c(panRGC, aRGC, bRGC, IPC, EENR, pNeuron,EEN,LEN,IN,Astro,Olig,micro))
genes <- unlist(sapply(genes,function(x){grep(x, rownames(df0@data), value = T)}))
c(as.character(genes),MZSVZ[,1])
temp <- df0@scale.data[ c(as.character(genes),MZSVZ[,1])[-113], ]
library(gplots)
pairs.breaks <- seq(-2.5, 2.5, length.out=101);
pdf(file = paste(Sys.Date(), "_int_marker_heatmap_clusters_temp.pdf", sep = ""),
width = 20, height = 40, useDingbats = F);
heatmap.3(temp,
breaks = pairs.breaks,
#symbreaks = T,
keysize = 0.8,
main="Marker gene expression",
col = bluered(100),
symkey = F,
cexRow=1, cexCol = 0.6,
Rowv = F,
Colv = T,#as.dendrogram(hca),
# ColSideColors = as.matrix(ColSideColors),
# ColSideColorsSize = 1,
#RowSideColors = RowSideColors,
dendrogram = "column",
#scale = "row",
# colsep = colsep,
# sepcolor = "black",
labRow = substr(rownames(temp), start = 20, stop = 100), #c("Glast", "Tbr2"),
labCol = "",
na.rm = F);
dev.off(dev.cur())
temp
c(as.character(genes),MZSVZ[,1])[-113]
df0@scale.data
df0
load("~/Data/Tarik/working_Tarik.R")
load("~/Data/Tarik/working_Tarik.RData")
temp <- df0@scale.data[ c(as.character(genes),MZSVZ[,1])[-113], ]
MZSVZ <- read.csv("~/Data/Da_Mi/MZ vs SVZ gene list 08-11-2017.csv", header = F, stringsAsFactors = F)
MZSVZ[,1] <- toupper(MZSVZ[,1])
MZSVZ[,1] <- unique(sapply(MZSVZ[,1], function(x){paste("\\b", x, "$", sep = "")}))
MZSVZ[,1] <- as.character(sapply(MZSVZ[,1],function(x){grep(x, rownames(df0@data), value = T)}))
MZSVZ <- MZSVZ[MZSVZ[,1] != "character(0)",]
genes <- unique(c(panRGC, aRGC, bRGC, IPC, EENR, pNeuron,EEN,LEN,IN,Astro,Olig,micro))
genes <- unlist(sapply(genes,function(x){grep(x, rownames(df0@data), value = T)}))
c(as.character(genes),MZSVZ[,1])[-113]
df0@var.genes
all_genes <- toupper(rownames(df0@data))
genes <- unique(c(panRGC, aRGC, bRGC, IPC, EENR, pNeuron,EEN,LEN,IN,Astro,Olig,micro))
genes <- unlist(sapply(genes,function(x){grep(x, all_genes, value = F)}))
genes
MZSVZ <- read.csv("~/Data/Da_Mi/MZ vs SVZ gene list 08-11-2017.csv", header = F, stringsAsFactors = F)
MZSVZ[,1] <- toupper(MZSVZ[,1])
MZSVZ[,1] <- unique(sapply(MZSVZ[,1], function(x){paste("\\b", x, "$", sep = "")}))
MZSVZ[,1] <- as.character(sapply(MZSVZ[,1],function(x){grep(x, all_genes, value = T)}))
MZSVZ <- MZSVZ[MZSVZ[,1] != "character(0)",]
c(as.character(genes),MZSVZ[,1])
MZSVZ <- read.csv("~/Data/Da_Mi/MZ vs SVZ gene list 08-11-2017.csv", header = F, stringsAsFactors = F)
MZSVZ[,1] <- toupper(MZSVZ[,1])
MZSVZ[,1] <- unique(sapply(MZSVZ[,1], function(x){paste("\\b", x, "$", sep = "")}))
MZSVZ[,1] <- as.character(sapply(MZSVZ[,1],function(x){grep(x, all_genes, value = F)}))
MZSVZ <- MZSVZ[MZSVZ[,1] != "character(0)",]
c(as.character(genes),MZSVZ[,1])
temp <- df0@scale.data[ c(as.character(genes),MZSVZ[,1]), ]
temp <- df0@scale.data[ c(as.character(genes),MZSVZ[,1])[-174:175], ]
temp <- df0@scale.data[ c(as.character(genes),MZSVZ[,1])[-(174:175)], ]
c(as.character(genes),MZSVZ[,1])
MZSVZ <- MZSVZ[MZSVZ[,1] != "integer(0)",]
temp <- df0@scale.data[ c(as.character(genes),MZSVZ[,1]), ]
c(as.character(genes),MZSVZ[,1])
temp <- df0@scale.data[ as.numeric(c(as.character(genes),MZSVZ[,1])), ]
pairs.breaks <- seq(-2.5, 2.5, length.out=101);
pdf(file = paste(Sys.Date(), "_int_marker_heatmap_clusters_temp.pdf", sep = ""),
width = 20, height = 40, useDingbats = F);
heatmap.3(temp,
breaks = pairs.breaks,
#symbreaks = T,
keysize = 0.8,
main="Marker gene expression",
col = bluered(100),
symkey = F,
cexRow=1, cexCol = 0.6,
Rowv = F,
Colv = T,#as.dendrogram(hca),
# ColSideColors = as.matrix(ColSideColors),
# ColSideColorsSize = 1,
#RowSideColors = RowSideColors,
dendrogram = "column",
#scale = "row",
# colsep = colsep,
# sepcolor = "black",
labRow = substr(rownames(temp), start = 20, stop = 100), #c("Glast", "Tbr2"),
labCol = "",
na.rm = F);
dev.off(dev.cur())
pdf(file = paste(Sys.Date(), "_int_marker_heatmap_clusters_temp.pdf", sep = ""),
width = 20, height = 40, useDingbats = F);
heatmap.3(temp,
breaks = pairs.breaks,
#symbreaks = T,
keysize = 0.8,
main="Marker gene expression",
col = bluered(100),
symkey = F,
cexRow=1, cexCol = 0.6,
Rowv = F,
Colv = T,#as.dendrogram(hca),
# ColSideColors = as.matrix(ColSideColors),
# ColSideColorsSize = 1,
#RowSideColors = RowSideColors,
dendrogram = "column",
#scale = "row",
# colsep = colsep,
# sepcolor = "black",
#labRow = substr(rownames(temp), start = 20, stop = 100), #c("Glast", "Tbr2"),
labCol = "",
na.rm = F);
dev.off(dev.cur())
load("~/Data/Da_Mi/P56_working.RData")
P56.RF.features
fs$error.cv
len
fs$n.var[fs$error.cv == min(fs$error.cv)
fs$n.var[fs$error.cv == min(fs$error.cv)]
fs$n.var[fs$error.cv == min(fs$error.cv)]
dim(feature_fs)
length(P56.RF.features)
length(P56.RF.features)
library(parallel)
detectCores()
load("~/project/iPSC/working.RData")
knitr::opts_chunk$set(root.dir = normalizePath("~/project/iPSC/"))
setwd("~/project/iPSC/")
load("BrainSpan_Gini_test.RData")
library(Seurat)
library(ineq)
library(dplyr)
keep <- apply(df0.BrainSpan@data, 1, function(xx){length(which(xx > 0))})
gini <- apply(df0.BrainSpan@data[keep,], 1, function(xx){ineq(xx, type = "Gini")})
head(gini)
hist(gini)
row.max <- rowMax(df0.BrainSpan@data)
row.max <- rowMax(as.matrix(df0.BrainSpan@data))
row.max <- rowMax(as.matrix(df0.BrainSpan@data))
plot(row.max[keep], gini)
plot(row.max[keep], log1p(gini))
plot(log1p(row.max[keep]), gini)
plot(row.max[keep], gini)
row.max <- rowMax(as.matrix(df0.BrainSpan@data))
row.means <- rowMeans(as.matrix(df0.BrainSpan@data))
plot(row.max[keep], gini)
plot(row.means[keep], gini)
hist(row.max)
hist(row.max[keep])
a <- ave(row.max[keep])
row.means <- rowMeans(as.matrix(df0.BrainSpan@data))
plot(row.means[keep], gini)
row.max <- rowMax(as.matrix(df0.BrainSpan@data))
plot(row.max[keep], gini)
hist(row.max[keep])
a <- ave(row.max[keep])
abline(v = a)
hist(row.max[keep])
a <- ave(row.max[keep])
abline(v = a, col = "red")
keep2 <- row.max > a
hist(Gini[keep & keep2])
length(keep)
length(keep2)
length(Gini)
gini
hist(gini[keep & keep2])
keep2 <- row.max > a
hist(gini[keep & keep2])
length(gini[keep & keep2])
keep2 <- row.max > a
hist(gini[keep & keep2], freq = 1000)
hist(gini[keep & keep2],breaks = 1000)
keep2 <- row.max > a
hist(gini[keep & keep2],breaks = 1000)
keep2 <- row.max > a
hist(gini[keep & keep2],breaks = 100)
keep2 <- row.max > a
hist(gini[keep & keep2],breaks = 50)
length(names(gini)[gini > 0.9 & keep2])
length(gini)
length(keep)
length(keep2)
gini <- apply(df0.BrainSpan@data, 1, function(xx){ineq(xx, type = "Gini")})
length(names(gini)[gini > 0.9 & keep2])
keep2 <- row.max > a
hist(gini[keep & keep2],breaks = 50)
names(gini)[gini > 0.9 & keep2][1:100]
names(gini)[gini > 0.99 & keep2]
names(gini)[gini > 0.6 & gini > 0.8 & keep2]
names(gini)[gini > 0.6 & gini < 0.8 & keep2]
names(gini)[gini > 0.6 & gini < 0.7 & keep2]
names(gini)[gini > 0 & gini < 0.1 & keep2]
names(gini)[gini > 0 & gini < 0.2 & keep2]
names(gini)[gini > 0 & gini < 0.3 & keep2]
save.image("/gpfs/ysm/home/zl242/project/iPSC/BrainSpan_Gini_test.RData")
setwd("~/project/iPSC/")
load("BrainSpan_Gini_test.RData")
knitr::opts_chunk$set(root.dir = normalizePath("~/project/iPSC/"))
load("BrainSpan_Gini_test.RData")
setwd("~/project/iPSC/")
knitr::opts_chunk$set(root.dir = normalizePath("~/project/iPSC/"))
knitr::opts_chunk$set(root.dir = normalizePath("~/project/iPSC/"))
setwd("~/project/iPSC/")
knitr::opts_chunk$set(root.dir = normalizePath("~/project/iPSC/"))
setwd("~/project/iPSC/")
load("BrainSpan_Gini_test.RData")
length(gini[keep & keep2])
setwd("~/Scripts/my_web/")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
<center>
![](images/DSC_1415.JPG){width=2500px}
</center>
install.packages("DT")
DT::datatable(iris)
read.xlsx
install.packages("openxlsx",dependencies = T)
```{r load library, include = F}
library(DT)
library(openxlsx)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
View(dt)
datatable(dt)
rmarkdown::render_site()
knitr::opts_chunk$set(cache = TRUE)
setwd("~/Scripts/my_web/")
library(DT)
library(openxlsx)
knitr::opts_chunk$set(cache = TRUE)
setwd("~/Scripts/my_web/")
library(DT)
library(openxlsx)
knitr::opts_chunk$set(cache = TRUE)
setwd("~/Scripts/my_web/")
library(DT)
library(openxlsx)
knitr::opts_chunk$set(cache = TRUE)
setwd("~/Scripts/my_web/")
library(DT)
library(openxlsx)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt,width = 0.5)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt,width = 10)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt,autowidth = T)
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt,options  = list(autowidth = T))
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt,options  = list(autoWidth = T))
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt,options  = list(autoWidth = T))
dt <- read.xlsx("./human_single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt,options  = list(autoWidth = T))
unlink('info_cache', recursive = TRUE)
rmarkdown::render_site()
unlink('index_cache', recursive = TRUE)
rmarkdown::render_site()
rmarkdown::render_site()
dt <- read.xlsx("./single_cell_RNA-seq_datasets.xlsx",sheet = 1,rowNames = F)
datatable(dt, escape = F, options  = list(autoWidth = T))
dt <- read.xlsx("./single_cell_RNA-seq_datasets.xlsx",sheet = 2,rowNames = F)
datatable(dt, escape = F, options  = list(autoWidth = T))
rmarkdown::render_site()
rmarkdown::render_site()
